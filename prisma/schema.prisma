// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  admin
  user
}

model Profile {
  id     String        @id @db.Uuid
  role   Role          @default(user)
  email  String        @unique
  orders ClientOrder[]

  @@map("profile")
}

model Material {
  id              String          @id @default(uuid()) @db.Uuid
  name            String
  nature          String
  origin          String
  type            String
  image           String
  price           Float
  quantity        Int             @default(1)
  products        Product[]
  custom_products CustomProduct[]

  @@map("material")
}

model Hardware {
  id              String          @id @default(uuid()) @db.Uuid
  name            String
  color           String
  image           String
  price           Float
  quantity        Int             @default(1)
  products        Product[]
  custom_products CustomProduct[]

  @@map("hardware")
}

model Product {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  image       String
  price       Float
  quantity    Int           @default(1)
  description String?
  material    Material?     @relation(fields: [materialId], references: [id])
  materialId  String?       @db.Uuid
  hardware    Hardware?     @relation(fields: [hardwareId], references: [id])
  hardwareId  String?       @db.Uuid
  orders      ClientOrder[]

  @@map("product")
}

model CustomProduct {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  price       Float
  quantity    Int           @default(1)
  material_id String        @db.Uuid
  hardware_id String        @db.Uuid
  material    Material      @relation(fields: [material_id], references: [id])
  hardware    Hardware      @relation(fields: [hardware_id], references: [id])
  orders      ClientOrder[]

  @@map("customProduct")
}

model Shipping {
  id    Int    @id @default(autoincrement())
  name  String
  price Float

  @@map("shipping")
}

enum OrderStatus {
  pending
  shipped
}

model ClientOrder {
  id              String          @id @default(uuid()) @db.Uuid
  order_no        Int             @unique @default(autoincrement())
  created_at      DateTime        @default(now())
  status          OrderStatus     @default(pending)
  payer_email     String
  payer_name      String
  user_id         String?         @db.Uuid
  user            Profile?        @relation(fields: [user_id], references: [id])
  amount          Float
  tax             Float
  shipping        Float
  address_street  String
  address_city    String
  address_state   String
  address_country String
  address_zip     String
  products        Product[]
  custom_products CustomProduct[]

  @@map("clientOrder")
}
