// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  admin
  user
}

model Profile {
  id     String        @id @db.Uuid
  email  String        @unique
  role   Role          @default(user)
  orders ClientOrder[]

  @@map("profile")
}

model Material {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  nature        String
  origin        String
  type          String
  image         String
  price         Float
  quantity      Int             @default(1)
  CustomProduct CustomProduct[]

  @@map("material")
}

model Hardware {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  color         String
  image         String
  price         Float
  quantity      Int             @default(1)
  CustomProduct CustomProduct[]

  @@map("hardware")
}

model Product {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  price       Float
  quantity    Int           @default(1)
  image       String
  description String?
  orders      ClientOrder[]
  CartItem    CartItem[]

  @@map("product")
}

model CustomProduct {
  id             String          @id @default(uuid()) @db.Uuid
  name           String
  price          Float
  quantity       Int             @default(1)
  material_id    String          @db.Uuid
  hardware_id    String          @db.Uuid
  material       Material        @relation(fields: [material_id], references: [id])
  hardware       Hardware        @relation(fields: [hardware_id], references: [id])
  order          ClientOrder?    @relation(fields: [clientOrderId], references: [id])
  clientOrderId  String?         @db.Uuid
  cartCustomItem CartCustomItem?

  @@map("customProduct")
}

model Shipping {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  price           Float
  CheckoutSession CheckoutSession[]

  @@map("shipping")
}

enum OrderStatus {
  pending
  shipped
}

model ClientOrder {
  id              String          @id @default(uuid()) @db.Uuid
  order_no        Int             @unique @default(autoincrement())
  created_at      DateTime        @default(now())
  status          OrderStatus     @default(pending)
  payer_email     String
  payer_name      String
  user_id         String?         @db.Uuid
  user            Profile?        @relation(fields: [user_id], references: [id])
  amount          Float
  tax             Float
  shipping        Float
  address_street  String
  address_city    String
  address_state   String
  address_country String
  address_zip     String
  products        Product[]
  custom_products CustomProduct[]

  @@map("clientOrder")
}

model CartItem {
  id                String          @id @default(uuid()) @db.Uuid
  quantity          Int             @default(1)
  product           Product         @relation(fields: [productId], references: [id])
  productId         String          @db.Uuid
  CheckoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id], onDelete: Cascade)
  checkoutSessionId String          @db.Uuid

  @@map("cartItem")
}

model CartCustomItem {
  id                String          @id @default(uuid()) @db.Uuid
  quantity          Int             @default(1)
  customProduct     CustomProduct   @relation(fields: [customProductId], references: [id], onDelete: Cascade)
  customProductId   String          @unique @db.Uuid
  CheckoutSession   CheckoutSession @relation(fields: [checkoutSessionId], references: [id], onDelete: Cascade)
  checkoutSessionId String          @db.Uuid

  @@map("cartCustomItem")
}

enum CheckoutSessionStatus {
  ongoing
  completed
}

model CheckoutSession {
  id           String                @id @default(uuid()) @db.Uuid
  sid          String                @unique
  status       CheckoutSessionStatus @default(ongoing)
  expires_at   DateTime              @default(now())
  shipping_id  String                @db.Uuid
  shipping     Shipping              @relation(fields: [shipping_id], references: [id])
  items        CartItem[]
  custom_items CartCustomItem[]

  @@map("checkoutSession")
}
